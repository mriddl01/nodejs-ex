apiVersion: template.openshift.io/v1
kind: Template
metadata:
  creationTimestamp: null
  name: "true"
parameters:
- displayName: DEV project name
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name
  name: STAGE_PROJECT
  required: true
- displayName: Application name
  name: APP_NAME
  value: nodejs-mongo-demo
  required: true
- displayName: Database Service name
  name: DATABASE_SERVICE_NAME
  value: mongodb
  required: true
- displayName: Database user name
  name: DATABASE_USER
  generate: "expression"
  from: "user[A-Z0-9]{3}"
- displayName: Database password
  name: DATABASE_PASSWORD
  generate: "expression"
  from: "user[A-Z0-9]{3}"
- displayName: Database admin  password
  name: DATABASE_ADMIN_PASSWORD
  generate: "expression"
  from: "user[A-Z0-9]{3}"
- displayName: Database name
  name: DATABASE_NAME
  value: sampledb
  required: true
objects:
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewBuild
    creationTimestamp: null
    labels:
      build: node-pipeline
    name: nodejs-mongodb-pipeline
  spec:
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: https://github.com/mikes-org/nodejs-ex.git
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: STAGE_PROJECT
          value: ${STAGE_PROJECT}
        - name: APP_NAME
          value: ${APP_NAME}
        jenkinsfilePath: openshift/pipeline/Jenkinsfile
      type: JenkinsPipeline
    triggers:
    - type: ConfigChange
    - github:
        secret: JFa5yaIBHwlBlDAuf1mb
      type: GitHub
    - generic:
        secret: bXjbcNRCMK9CMv8QRXed
      type: Generic
  status:
    lastVersion: 0
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      openshift.io/generated-by: OpenShiftNewApp
      template.alpha.openshift.io/wait-for-ready: "true"
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
      template: nodejs-mongodb-example
    name: ${APP_NAME}
    namespace: ${DEV_PROJECT}
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    postCommit:
      script: npm test
    resources: {}
    runPolicy: Serial
    source:
      binary: {}
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:10
          namespace: openshift
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
    - github:
        secret: 44gJXS4BR8XNjG4ldaD0RfIBvfyCYyfkkLpoSaMT
      type: GitHub
    - generic:
        secret: rqVYBbJmJo1THXUngGcujh4bPFjQRvNORK8653J0
      type: Generic
  status:
    lastVersion: 0
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
      openshift.io/generated-by: OpenShiftNewApp
    generation: 1
    labels:
      app: ${APP_NAME}
      template: nodejs-mongodb-example
    name: ${APP_NAME}
    namespace: ${DEV_PROJECT}
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
      openshift.io/generated-by: OpenShiftNewApp
    generation: 1
    labels:
      app: ${APP_NAME}
      template: nodejs-mongodb-example
    name: ${APP_NAME}
    namespace: ${STAGE_PROJECT}
### dev MONGO DB
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      openshift.io/generated-by: OpenShiftNewApp
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: nodejs-mongodb-example
      template: nodejs-mongodb-example
    name: ${DATABASE_SERVICE_NAME}
    namespace: ${DEV_PROJECT}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          name: ${DATABASE_SERVICE_NAME}
        name: ${DATABASE_SERVICE_NAME}
        namespace: ${DEV_PROJECT}
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${APP_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: ${DATABASE_SERVICE_NAME}-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:${MONGODB_VERSION}
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
### stage MONGO DB
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      openshift.io/generated-by: OpenShiftNewApp
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: nodejs-mongodb-example
      template: nodejs-mongodb-example
    name: ${DATABASE_SERVICE_NAME}
    namespace: ${STAGE_PROJECT}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          name: ${DATABASE_SERVICE_NAME}
        name: ${DATABASE_SERVICE_NAME}
        namespace: ${STAGE_PROJECT}
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${APP_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: ${DATABASE_SERVICE_NAME}-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:${MONGODB_VERSION}
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
## DEV APP Deployment
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      openshift.io/generated-by: OpenShiftNewApp
      template.alpha.openshift.io/wait-for-ready: "true"
    creationTimestamp: null
    generation: 4
    labels:
      app: ${APP_NAME}
      template: ${APP_NAME}
    name: ${APP_NAME}
    namespace: ${DEV_PROJECT}
  spec:
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      name: ${APP_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          name: ${APP_NAME}
        name: ${APP_NAME}
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${APP_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
          namespace: ${DEV_PROJECT}
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
## STAGE APP Deployment
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      openshift.io/generated-by: OpenShiftNewApp
      template.alpha.openshift.io/wait-for-ready: "true"
    creationTimestamp: null
    generation: 4
    labels:
      app: ${APP_NAME}
      template: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      name: ${APP_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          name: ${APP_NAME}
        name: ${APP_NAME}
        namespace: ${STAGE_PROJECT}
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${APP_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
          namespace: ${STAGE_PROJECT}
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
## DEV APP Service
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      openshift.io/generated-by: OpenShiftNewApp
      service.alpha.openshift.io/dependencies: '[{"name": "mongodb", "kind": "Service"}]'
    labels:
      app: ${APP_NAME}
      template: nodejs-mongodb-example
    name: ${APP_NAME}
    namespace: ${DEV_PROJECT}
  spec:
    ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
## STAGE APP Service
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      openshift.io/generated-by: OpenShiftNewApp
      service.alpha.openshift.io/dependencies: '[{"name": "mongodb", "kind": "Service"}]'
    labels:
      app: ${APP_NAME}
      template: nodejs-mongodb-example
    name: ${APP_NAME}
    namespace: ${STAGE_PROJECT}
  spec:
    ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
## DEV MONGO SVC
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: nodejs-mongodb-example
      template: nodejs-mongodb-example
    name: ${DATABASE_SERVICE_NAME}
    namespace: ${DEV_PROJECT}
  spec:
    ports:
    - name: mongodb
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
## STAGE MONGO SVC
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: nodejs-mongodb-example
      template: nodejs-mongodb-example
    name: ${DATABASE_SERVICE_NAME}
    namespace: ${STAGE_PROJECT}
  spec:
    ports:
    - name: mongodb
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector: 
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
## DEV APP ROUTE
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
      template: nodejs-mongodb-example
    name: ${APP_NAME}
    namespace: ${DEV_PROJECT}
  spec:
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    wildcardPolicy: None
## STAGE APP ROUTE
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
      template: nodejs-mongodb-example
    name: ${APP_NAME}
    namespace: ${STAGE_PROJECT}
  spec:
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APP_NAME}
    namespace: ${DEV_PROJECT}
  stringData:
    database-user: ${DATABASE_USER}
    database-password: ${DATABASE_PASSWORD}
    database-admin-password: ${DATABASE_ADMIN_PASSWORD}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APP_NAME}
    namespace: ${STAGE_PROJECT}
  stringData:
    database-user: ${DATABASE_USER}
    database-password: ${DATABASE_PASSWORD}
    database-admin-password: ${DATABASE_ADMIN_PASSWORD}
## SLAVE Config Map
- apiVersion: v1
  data:
    maven-template: |-
            <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
              <inheritFrom></inheritFrom>
              <name>nodejs8-slave</name>
              <privileged>false</privileged>
              <alwaysPullImage>false</alwaysPullImage>
              <instanceCap>2147483647</instanceCap>
              <idleMinutes>0</idleMinutes>
              <label>nodejs8</label>
              <serviceAccount>jenkins</serviceAccount>
              <nodeSelector></nodeSelector>
              <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
              <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
                <memory>false</memory>
              </workspaceVolume>
              <volumes />
              <containers>
                <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
                  <name>jnlp</name>
                  <image>registry.access.redhat.com/openshift3/jenkins-agent-nodejs-8-rhel7</image>
                  <privileged>false</privileged>
                  <alwaysPullImage>false</alwaysPullImage>
                  <workingDir>/tmp</workingDir>
                  <command></command>
                  <args>${computer.jnlpmac} ${computer.name}</args>
                  <ttyEnabled>false</ttyEnabled>
                  <resourceRequestCpu>200m</resourceRequestCpu>
                  <resourceRequestMemory>512Mi</resourceRequestMemory>
                  <resourceLimitCpu>2</resourceLimitCpu>
                  <resourceLimitMemory>1Gi</resourceLimitMemory>
                  <envVars/>
                </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
              </containers>
              <envVars/>
              <annotations/>
              <imagePullSecrets/>
            </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>

  kind: ConfigMap
  metadata:
    name: node8-config
    labels:
      app: nodejs-sample-cicd
      role: jenkins-slave



